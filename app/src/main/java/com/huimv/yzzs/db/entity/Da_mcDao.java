package com.huimv.yzzs.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.huimv.yzzs.db.entity.Da_mc;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DA_MC.
*/
public class Da_mcDao extends AbstractDao<Da_mc, Long> {

    public static final String TABLENAME = "DA_MC";

    /**
     * Properties of entity Da_mc.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mcid = new Property(1, String.class, "mcid", false, "MCID");
        public final static Property Mcmc = new Property(2, String.class, "mcmc", false, "MCMC");
        public final static Property Zsid = new Property(3, String.class, "zsid", false, "ZSID");
        public final static Property Zsmc = new Property(4, String.class, "zsmc", false, "ZSMC");
        public final static Property Jqid = new Property(5, String.class, "jqid", false, "JQID");
    }


    public Da_mcDao(DaoConfig config) {
        super(config);
    }
    
    public Da_mcDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DA_MC' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MCID' TEXT," + // 1: mcid
                "'MCMC' TEXT," + // 2: mcmc
                "'ZSID' TEXT," + // 3: zsid
                "'ZSMC' TEXT," + // 4: zsmc
                "'JQID' TEXT);"); // 5: jqid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DA_MC'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Da_mc entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mcid = entity.getMcid();
        if (mcid != null) {
            stmt.bindString(2, mcid);
        }
 
        String mcmc = entity.getMcmc();
        if (mcmc != null) {
            stmt.bindString(3, mcmc);
        }
 
        String zsid = entity.getZsid();
        if (zsid != null) {
            stmt.bindString(4, zsid);
        }
 
        String zsmc = entity.getZsmc();
        if (zsmc != null) {
            stmt.bindString(5, zsmc);
        }
 
        String jqid = entity.getJqid();
        if (jqid != null) {
            stmt.bindString(6, jqid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Da_mc readEntity(Cursor cursor, int offset) {
        Da_mc entity = new Da_mc( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mcid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mcmc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zsid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zsmc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // jqid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Da_mc entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMcid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMcmc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZsid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZsmc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setJqid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Da_mc entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Da_mc entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
