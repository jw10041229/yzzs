package com.huimv.yzzs.db.entity;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.huimv.yzzs.db.entity.Da_wenduDao;
import com.huimv.yzzs.db.entity.Da_shiduDao;
import com.huimv.yzzs.db.entity.Da_anqiDao;
import com.huimv.yzzs.db.entity.Da_phDao;
import com.huimv.yzzs.db.entity.Da_mcDao;
import com.huimv.yzzs.db.entity.Da_btDao;
import com.huimv.yzzs.db.entity.Da_hksjDao;
import com.huimv.yzzs.db.entity.Da_qk_shuiyaDao;
import com.huimv.yzzs.db.entity.Da_qk_shuiliuDao;
import com.huimv.yzzs.db.entity.Da_scjDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 3): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 35;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        Da_wenduDao.createTable(db, ifNotExists);
        Da_shiduDao.createTable(db, ifNotExists);
        Da_anqiDao.createTable(db, ifNotExists);
        Da_phDao.createTable(db, ifNotExists);
        Da_mcDao.createTable(db, ifNotExists);
        Da_btDao.createTable(db, ifNotExists);
        Da_hksjDao.createTable(db, ifNotExists);
        Da_qk_shuiyaDao.createTable(db, ifNotExists);
        Da_qk_shuiliuDao.createTable(db, ifNotExists);
        Da_scjDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        Da_wenduDao.dropTable(db, ifExists);
        Da_shiduDao.dropTable(db, ifExists);
        Da_anqiDao.dropTable(db, ifExists);
        Da_phDao.dropTable(db, ifExists);
        Da_mcDao.dropTable(db, ifExists);
        Da_btDao.dropTable(db, ifExists);
        Da_hksjDao.dropTable(db, ifExists);
        Da_qk_shuiyaDao.dropTable(db, ifExists);
        Da_qk_shuiliuDao.dropTable(db, ifExists);
        Da_scjDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(Da_wenduDao.class);
        registerDaoClass(Da_shiduDao.class);
        registerDaoClass(Da_anqiDao.class);
        registerDaoClass(Da_phDao.class);
        registerDaoClass(Da_mcDao.class);
        registerDaoClass(Da_btDao.class);
        registerDaoClass(Da_hksjDao.class);
        registerDaoClass(Da_qk_shuiyaDao.class);
        registerDaoClass(Da_qk_shuiliuDao.class);
        registerDaoClass(Da_scjDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
